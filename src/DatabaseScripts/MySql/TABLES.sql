SET foreign_key_checks = 0;
DROP TABLE `hr`.`countries`, `hr`.`departments`, `hr`.`employees`, `hr`.`job_history`, `hr`.`jobs`, `hr`.`locations`, `hr`.`regions`;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS COUNTRIES
(	
	COUNTRY_ID CHAR(2) NOT NULL, 
	COUNTRY_NAME VARCHAR(40), 
	REGION_ID INT, 
	OTHER TEXT, 
	PRIMARY KEY (COUNTRY_ID)
);

CREATE TABLE IF NOT EXISTS LOCATIONS 
(	
	LOCATION_ID INT NOT NULL,
    PRIMARY KEY (LOCATION_ID), 
	STREET_ADDRESS VARCHAR(40), 
	POSTAL_CODE VARCHAR(12), 
	CITY VARCHAR(30) NOT NULL, 
	STATE_PROVINCE VARCHAR(25), 
	COUNTRY_ID CHAR(2),
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES (COUNTRY_ID)
);


CREATE TABLE IF NOT EXISTS REGIONS
(	
	REGION_ID INT NOT NULL, 
	REGION_NAME VARCHAR(25), 
	REGION_DESCRIPTION TEXT, 
    PRIMARY KEY (REGION_ID)
);


CREATE TABLE IF NOT EXISTS DEPARTMENTS
(	
	 DEPARTMENT_ID INT, 
	 DEPARTMENT_NAME VARCHAR(30) NOT NULL, 
	 MANAGER_ID INT, 
	 LOCATION_ID INT, 
	 PRIMARY KEY (DEPARTMENT_ID), 
	 FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (LOCATION_ID)
);

CREATE TABLE IF NOT EXISTS JOBS
(	
	 JOB_ID VARCHAR(10),
     PRIMARY KEY (JOB_ID), 
	 JOB_TITLE VARCHAR(35) NOT NULL, 
	 MIN_SALARY DECIMAL, 
	 MAX_SALARY DECIMAL
	 
);

CREATE TABLE IF NOT EXISTS EMPLOYEES
(	
    EMPLOYEE_ID INT, 
	FIRST_NAME VARCHAR(20), 
	LAST_NAME VARCHAR(25) NOT NULL, 
	EMAIL VARCHAR(25) NOT NULL, 
	PHONE_NUMBER VARCHAR(20) COMMENT 'US-style, area code included, separator as dot.', 
	HIRE_DATE DATE NOT NULL, 
	JOB_ID VARCHAR(10) NOT NULL, 
	SALARY DECIMAL, 
	COMMISSION_PCT DECIMAL, 
	MANAGER_ID INT, 
	DEPARTMENT_ID INT, 
	CHECK (SALARY > 0), 
	UNIQUE (EMAIL), 
	PRIMARY KEY (EMPLOYEE_ID), 
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS (DEPARTMENT_ID), 
	FOREIGN KEY (JOB_ID) REFERENCES JOBS (JOB_ID), 
	FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
) COMMENT='Employees is a very important table, used in many places.';

ALTER TABLE DEPARTMENTS ADD FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID);
 
CREATE TABLE IF NOT EXISTS JOB_HISTORY 
(	
	EMPLOYEE_ID int NOT NULL, 
	START_DATE DATE NOT NULL, 
	END_DATE DATE NOT NULL, 
	JOB_ID VARCHAR(10) NOT NULL, 
	DEPARTMENT_ID int,
	YEARS INT UNSIGNED,
	CHECK (end_date > start_date), 
	PRIMARY KEY (EMPLOYEE_ID, START_DATE),
	FOREIGN KEY (JOB_ID) REFERENCES JOBS (JOB_ID), 
	FOREIGN KEY (EMPLOYEE_ID)REFERENCES EMPLOYEES (EMPLOYEE_ID), 
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS (DEPARTMENT_ID)
);